<?xml version="1.0" encoding="UTF-8"?>
<prompts>

	<prompt strategy="task" id="FILE_STEP_TIMEOUT_WARNING">
		<text>We need to start wrapping up.</text>
		<text>Okay, let's get ready to move on to reflection.</text>
	</prompt>

	
	<prompt strategy="task" id="FILE_STEP_TIMED_OUT">
		<text>We need to be moving along on this test case.</text>
		<text>Time for this test case is almost over.</text>
		<text>Time to move along on this test case if you can.</text>
	</prompt>
    
    <prompt strategy="task" id="FILE_STEP_COMPLETE">
       <text>You've passed the testcase!</text>
       <text>Great! You have passed the testcase.</text>
       <text>Way to go! You've passed the testcase.</text>
       <text>Good job. You've passed the testcase.</text>
    </prompt>
	
    <prompt strategy="task" id="WAIT_FOR_CHECKIN">
       <text>Okay, we're about to begin.</text>
    </prompt>
    
    <prompt strategy="task" id="TIMEOUT_WARNING">
       <text>We need to start wrapping up. Remember to type "ready" when you're ready to move on.</text>
       <text>Okay, let's get ready to move on. Remember to type "ready" if you're done with this step.</text>
    </prompt>

 
    <!-- PROMPTS DURING TASK 1 -->
    <prompt strategy="task" id="P1a" intention="transactivity_prompt_1">
      	<text>Hint 1: When approaching the regex pattern, you want to break it down to the key components which are:
(1) an initial whitespace.
(2) the first integer number [digit from 0 to 9].
(3) the optional group, which contains a hyphen and second integer number [digit from 0-9].
(4) the word “hour” with optional “s” character.

Breaking down the phrase into small sections helps a lot in figuring out which regex characters to use! Keep it up! You guys got this! 
</text>
    </prompt>   
    
    <prompt strategy="task" id="P1b" intention="cut_off_0_1">
    
     	<text>Hint 2: Don't forget to use re.IGNORECASE in re.compile() to ensure case-insensitivity! Also, make sure that your regex pattern does not extract “5 hours” from “4-5 hours” or “4.5-5.5 Hours”.</text>
    </prompt>


    <!-- PROMPTS DURING TASK 2 -->
    <prompt strategy="task" id="P2a" intention="transactivity_prompt_2">
     	<text>Hint 1: Let’s break down the parts for this regex pattern! |||So, we want to ultimately find a regex pattern to satisfy/match to “n.n hour(s)” or “n.n - n.n hours”, where “n” stands for any number, such as “1.5 hours” or “4.5 - 5.5 hours”|| When looking at the regex pattern, it would be:
(1) an initial whitespace.
(2) the first decimal number (first digit, period, second digit).
(3) the optional group, which contains a hyphen, second decimal number (first digit, period, second digit), and final whitespace.
(4) the word “hour” with optional “s” character.
||| When approaching this problem, it also really helps to use the “find” button on Jupyter notebooks to figure out which regex syntax to use. </text>
    </prompt>   
    
     <prompt strategy="task" id="P2b" intention="cut_off_1_1">
     	<text>Hint 2: For the regex pattern’s optional group, let’s break it down further! For the optional group, this contains a hyphen second decimal number (first digit, period, second digit), and final whitespace.
|||
So, breaking it down according to the syntax, it would have a similar format:
(1) optional group ( )?
(2) hyphen, which you can isolate by using “\”.
(3) first digit, which will be used 1 or more times.
(4) period, which you can isolate by using “\”.
(5) second digit, which will be used 1 or more times.
|||
Hopefully this helps to provide a clear direction for one way to approach this problem. Best of luck! 
</text>
     </prompt>
 
 
    <!-- PROMPTS DURING TASK 3 -->
    <prompt strategy="task" id="P3a" intention="transactivity_prompt_3">
     	<text> Hint 1: For this question, you want to first define `spaced_recipe_text` variable and store a compiled regex pattern that will have the following raw string: 
(1) starts with ‘Recipe’
(2) whitespace
(3) digit [0-9] - which will be used 1 or more times
(4) colon “:”
|||
Then, after defining your regex pattern, utilize a regex method to split the recipe_text. Note: Using the strip() python method on recipe_text will greatly help! 
</text>
    </prompt>  
          
     <prompt strategy="task" id="P3b" intention="cut_off_2_1">
     	<text>Hint 2: After splitting the text, you want to iterate through the `spaced_recipe_text. Use strip() to remove any leading or trailing whitespace and add a blank line by inserting ‘print()’ between the recipes for better readability! </text>
 
     </prompt>
 
 
    <!-- PROMPTS DURING TASK 4 -->
    <prompt strategy="task" id="P4a" intention="transactivity_prompt_4">
     	<text>Hint 1: For this question, you want to write a regex pattern that will compile the raw string containing ‘two hours’ and/or ‘2 Hours’. Make sure to look back on the regex cheat sheet for what character will refer to “and/or”! </text>
    </prompt>   
        
     <prompt strategy="task" id="P4b" intention="cut_off_3_1">
     	<text>Hint 2: For using a single regex method to replace both of the specified phrases, use the format re.[insert regex method](replace_regex_pattern, [replacement phrase], recipe_text). Make sure to fill in the correct blanks! Best of luck on approaching this problem! </text>
     	
     </prompt>

    <!-- for READY_GENERIC -->    
    <prompt strategy="task" id="READY_GENERIC">
       <text>Type "ready" when you are ready to move on.</text>
    </prompt>
     
    <prompt strategy="task" id="READY_GENERIC_NO_READY">
       <text>We will move on after a while or when everyone is ready.</text>
    </prompt>
         
    <prompt strategy="task" id="WAIT_FOR_CONSENSUS">
       <text>When you've reached consensus in your group, type "ready".</text>
       <text>Make sure your partner agrees before continuing.</text>
       <text>We'll move to the next part once everyone is in agreement.</text>
    </prompt>
    
    <prompt strategy="task" id="ACKNOWLEDGE">
       <text>Thanks, [STUDENT]. Make sure your team is in agreement.</text>
       <text>Okay, [STUDENT]. Make sure your team agrees.</text>
       <text>Hang on until your team is ready, [STUDENT].</text>
       <text>Thanks, [STUDENT]. Hang on until your team is ready...</text>
    </prompt>
    
    <prompt strategy="task" id="ALL_READY">
       <text>Okay, let's move on...</text>
       <text>Moving on...</text>
       <text>Onward!</text>
    </prompt>
  
  
 <!-- ================================ -->
 <!-- The following prompts are unused -->
 <!-- ================================ -->
      
    <prompt strategy="task" id="WAIT_FOR_DISCUSSION">
       <text>We'll move on when everyone is ready.</text>
    </prompt>
       
    <prompt strategy="task" id="WAIT_FOR_READING">
       <text>Once you've read this and discussed it with your team, type "ready".</text>
       <text>When everyone is comfortable with this material, type "ready".</text>
    </prompt>
    
</prompts>

