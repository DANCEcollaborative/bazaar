<?xml version="1.0" encoding="UTF-8"?>
<prompts>

	<!-- GREETING PROMPTS --> 
	
    <prompt strategy="task" id="INTRODUCE" intention="Build_rapport">
        <text>We're starting! I'm OPE_Bot.|||Beginning now, you will have approximately 80 minutes to complete programming and submit to receive your grades.|||Tell the team your name and share something about yourself, such as a hobby you have or a game you like to play. Ask questions about what the others share. Take a moment to learn more about each other.</text>
    </prompt>
    
    <prompt strategy="task" id="GREET" intention="Greet">
        <text>Hi, [NAME].</text>
        <text>Nice to meet you, [NAME].</text>
        <text>Howdy, [NAME].</text>
        <text>Hello, [NAME].</text>
    </prompt>
 


	<!-- GENERAL PROMPTS --> 
	
	<prompt strategy="task" id="PROMPT_DISCUSSION" intention="discussion_phase_start">
     	<text>Let's take some time to discuss this solution. Take turns to discuss the question posed by the bot. We will move on in a few minutes.</text>
    </prompt> 


	<!-- HINTS & DISCUSSION FOR INITIALIZATION -->
	
	<prompt strategy="task" id="PROMPT_GREETING" intention="cut_off_PROMPT_GREETING">
     	<text>We're starting! I'm OPE_Bot.</text>
    </prompt> 

	<prompt strategy="task" id="PROMPT_SESSION_TIME" intention="cut_off_PROMPT_SESSION_TIME">
     	<text>Beginning now, you will have approximately 80 minutes to complete the OPE tasks and submit to receive your grades.</text>
    </prompt> 
 


	<!-- HINTS & DISCUSSION FOR TASK 1 -->
	<!-- GATED PROMPTS are in gatekeeper_prompts.xml -->
      
    <prompt strategy="task" id="PROMPT_PROGRAMMNG_PHASE" intention="program1">
        <text>Okay! We are now in the Programming phase. Let's get started with 'task1.py' and assign your responsibilities.</text>
    </prompt>
	
    <prompt strategy="task" id="P1a" intention="parsons_prompt_start_0">
        <text>We are doing things slightly differently for this session. I will provide you with pseudocode for two possible solutions. Discuss which one you might want to implement with your teammates. You will be given time for implementation after your discussion.</text>
    </prompt>
      
    <prompt strategy="task" id="P1b" intention="parsons_prompt_option1_0">
        <text>Pseudocode 1: 

X is the feature set
y is the label set
Initialize preprocessor with standardized data distribution using StandardScaler()
Split input data X, and y into train and test sets using train_test_split() and seed.
Initialize model using LogisticRegression() and seed.
fit preprocessor on training data and transform to pass to the next step
transform test data to pass to the next step
fit model on preprocessed data
return the model score</text>
    </prompt>
      
    <prompt strategy="task" id="P1c" intention="parsons_prompt_option2_0">
        <text>Pseudocode 2: 

X is the feature set
y is the label set
Initialize preprocessor with standardized data distribution using StandardScaler()
Split input data X, and y into train and test sets using train_test_split() and seed.
Initialize model using LogisticRegression() and seed.
fit preprocessor on training data and transform to pass to the next step
fit and transform test data to pass to the next step
fit model on preprocessed data
return the model score</text>
    </prompt>
      
    <prompt strategy="task" id="P1d" intention="parsons_prompt_follow_0">
        <text>First, look at the two pseudocodes and identify the differences.</text>
    </prompt>
      
    <prompt strategy="task" id="P1e" intention="parsons_prompt_followup_0">
        <text>Remember that both model and pre-processor should be trained (fitted) only on train set!</text>
    </prompt>
      
    <prompt strategy="task" id="P1f" intention="parsons_prompt_final_0">
        <text>Once everyone is in agreement, the driver can start the implementation with assistance from the team.</text>
    </prompt>
      
    <prompt strategy="task" id="P1g" intention="parsons_prompt_final_0">
        <text>Remember to make sure the 'wget ...' command above COMPLETES SUCCESSFULLY before running the test case. If it doesn't complete successfully, just execute the command again.</text>
    </prompt> 
        
    <prompt strategy="task" id="PROMPT_STEP_LO1_REFLECTION" intention="prompt_for_reflection1">
     	<text>Project Manager, please lead the discussion - You already know why it's extremely bad practice to use part of the train set as test set. Now, discuss why usage of preprocessor should follow the same logic.</text>
    </prompt>
     
    <prompt strategy="task" id="PROMPT_STEP_LO1_REFLECTION_FOLLOW" intention="prompt_for_reflection1">
     	<text>As a follow-up, discuss why you should not fit StandardScaler on test data.</text>
    </prompt>



	<!-- HINTS & DISCUSSION FOR TASK 2 -->
	<!-- GATED PROMPTS are in gatekeeper_prompts.xml -->
      
    <prompt strategy="task" id="PROMPT_ROLE_SWITCH_TASK2" intention="role_switch_warning">
        <text>Ok, we are switching roles now. Let's move on to 'task2.py'.</text>
    </prompt>
      
    <prompt strategy="task" id="P2a" intention="parsons_prompt_start_1">
        <text>For task 2, I will again provide you with pseudocode for two possible solutions. Discuss which one you might want to implement with your teammates. You will be given time for implementation after your discussion.</text>
    </prompt>
      
    <prompt strategy="task" id="P2b" intention="parsons_prompt_option1_1">
        <text>Pseudocode 1: 

def cpu_predict(data, model, vectorizer):
	Sequential implementation using predict_one() function while iterating through the data.

def gpu_predict(data, model, vectorizer):
	Batched implementation using predict_batch(). Transform output to list using to_list()</text>
    </prompt>
      
    <prompt strategy="task" id="P2c" intention="parsons_prompt_option2_1">
        <text>Pseudocode 2: 

def cpu_predict(data, model, vectorizer):
	Iterate through each row of the data and pass through predict_one() function.
	The first element of the output is returned.

def gpu_predict(data, model, vectorizer):
	Batched implementation using predict_batch()</text>
    </prompt>
      
    <prompt strategy="task" id="P2d" intention="parsons_prompt_follow_1">
        <text>Compare the pseudocode implementations for each function. Which pseudocode is correct, and why?</text>
    </prompt>
      
    <prompt strategy="task" id="P2e" intention="parsons_prompt_followup_1">
        <text>If you are unsure, have the Researcher look up the inputs and outputs of the functions mentioned.</text>
    </prompt>
      
    <prompt strategy="task" id="P2f" intention="parsons_prompt_final_1">
        <text>Once everyone is in agreement, the driver can start the implementation with assistance from the team.</text>
    </prompt>
     
    <prompt strategy="task" id="PROMPT_STEP_LO2_REFLECTION" intention="prompt_for_reflection2">
     	<text>Project Manager, your turn to lead the discussion again - In a lot of cases using small mini-batches or even one-by-one processing will benefit complex models running on CPU. At the same time, using large batches will be better while using a GPU. Based on this, discuss take turns to discuss the technical reasons why this is happening.</text>
    </prompt>
     
    <prompt strategy="task" id="PROMPT_STEP_LO2_REFLECTION_FOLLOW" intention="prompt_for_reflection2">
     	<text>Based on your discussion, how will you decide whether to use the CPU or the GPU for processing complex models in the future?</text>
    </prompt>



	<!-- HINTS & DISCUSSION FOR TASK 3 -->
	<!-- GATED PROMPTS are in gatekeeper_prompts.xml -->
      
    <prompt strategy="task" id="PROMPT_ROLE_SWITCH_TASK3" intention="role_switch_warning">
        <text>Ok, we are switching roles now. Let's move on to 'task3.py'.</text>
    </prompt>
      
    <prompt strategy="task" id="P3a" intention="parsons_prompt_start_2">
        <text>Again for task 3, I will provide you with pseudocode for two possible solutions. Discuss which one you might want to implement with your teammates. You will be given time for implementation after your discussion.</text>
    </prompt>
      
    <prompt strategy="task" id="P3b" intention="parsons_prompt_option1_2">
        <text>Pseudocode 1: 

train_loss, n_batches = 0, 0
for i, data in enumerate(trainloader, 0):
	# get the inputs; data is a list of [inputs, labels]

	# zero the parameter gradients

	# forward pass
	# backpass
	# optimizer step

	# calculate total train loss
	# increment number of batches

train_loss /= n_batches

correct, total = 0, 0
with torch.no_grad():
	for data in testloader:
		images, labels = data
		outputs = net(images)
		_, predicted = torch.max(outputs.data, 1)
		total += labels.size(0)
		correct += (predicted == labels).sum().item()

return train_loss, correct / total</text>
    </prompt>
      
    <prompt strategy="task" id="P3c" intention="parsons_prompt_option2_2">
        <text>Pseudocode 2: 

train_loss, n_batches = 0, 0
for i, data in enumerate(trainloader, 0):
	# get the inputs; data is a list of [inputs, labels]

	# forward pass
	# backpass
	# optimizer step

	# calculate total train loss
	# increment number of batches

train_loss /= n_batches

correct, total = 0, 0
with torch.no_grad():
	for data in testloader:
		images, labels = data
		outputs = net(images)
		_, predicted = torch.max(outputs.data, 1)
		total += labels.size(0)
		correct += (predicted == labels).sum().item()

return train_loss, correct / total</text>
    </prompt>
      
    <prompt strategy="task" id="P3d" intention="parsons_prompt_follow_2">
        <text>What's the difference between the two pseudocodes? Why is this difference important?</text>
    </prompt>
      
    <prompt strategy="task" id="P3e" intention="parsons_prompt_followup_2">
        <text>For a full training loop example, have the researcher look up https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html#train-the-network</text>
    </prompt>
      
    <prompt strategy="task" id="P3f" intention="parsons_prompt_final_2">
        <text>Once everyone is in agreement, the driver can start the implementation with assistance from the team.</text>
    </prompt>
     
    <prompt strategy="task" id="PROMPT_STEP_LO3_REFLECTION" intention="prompt_for_reflection3">
     	<text>Led by the Project Manager, take turns to discuss why it's important to zero gradient on each iteration of training. </text>
    </prompt>
     
    <prompt strategy="task" id="PROMPT_STEP_LO3_REFLECTION_FOLLOW" intention="prompt_for_reflection3">
     	<text>As a follow-up, what will happen if you do not do it?</text>
    </prompt>
    
    

	<!-- HINTS & DISCUSSION FOR TASK 4 -->
	<!-- GATED PROMPTS are in gatekeeper_prompts.xml -->
      
    <prompt strategy="task" id="PROMPT_ROLE_SWITCH_TASK4" intention="role_switch_warning">
        <text>Ok, we are switching roles now. Let's move on to 'task4.py'.</text>
    </prompt>
      
    <prompt strategy="task" id="P4a" intention="parsons_prompt_start_3">
        <text>Finally, for task 4 I will provide you with pseudocode for two possible solutions. Discuss which one you might want to implement with your teammates. You will be given time for implementation after your discussion.</text>
    </prompt>
      
    <prompt strategy="task" id="P4b" intention="parsons_prompt_option1_3">
        <text>Pseudocode 1: 

# inputs = use tokenizer function with text as input and return parameter set to pretrained
with torch.no_grad():
	# Return logits from out = model(**inputs, return_dict=True)

return train_loss, correct / total</text>
    </prompt>
      
    <prompt strategy="task" id="P4c" intention="parsons_prompt_option2_3">
        <text>Pseudocode 2: 

# inputs = use tokenizer function with text as input and return parameter set to pretrained
with torch.no_grad():
	# Return first element of logits from out = model(**inputs, return_dict=True)</text>
    </prompt>
      
    <prompt strategy="task" id="P4d" intention="parsons_prompt_follow_3">
        <text>As before, what differences do you observe and how can you look to see which one is correct?</text>
    </prompt>
      
    <prompt strategy="task" id="P4e" intention="parsons_prompt_followup_3">
        <text>@Researcher, this link may be useful ;) - https://huggingface.co/transformers/model_doc/roberta.html#robertaforsequenceclassification</text>
    </prompt>
      
    <prompt strategy="task" id="P4f" intention="parsons_prompt_final_3">
        <text>Once everyone is in agreement, the driver can start the implementation with assistance from the team.</text>
    </prompt>
     
    <prompt strategy="task" id="PROMPT_STEP_LO4_REFLECTION" intention="prompt_for_reflection4">
     	<text>Final discussion time led by the Project Manager -  Documentation navigation skill is crucial for your career. Discuss how you can quickly browse long and complex documentation.</text>
    </prompt>
     
    <prompt strategy="task" id="PROMPT_STEP_LO4_REFLECTION_FOLLOW" intention="prompt_for_reflection4">
     	<text>What was the exact function you ended up using here? Did you find any possible alternatives?</text>
    </prompt>
 


	<!-- CLOSING PROMPTS --> 
     
    <prompt strategy="task" id="PROMPT_STEP_SUBMISSION" intention="ope_end">
     	<text>Thanks for participating in today's OPE activity. Execute the submitter script './submitter' to submit. You will also obtain the token that will then be used to unlock the graded post-quiz. Don't forget to complete the graded post-quiz for full credit.</text>
    </prompt>
     
    <prompt strategy="task" id="PROMPT_STEP_FINAL" intention="ope_end">
     	<text>I'm logging off. Thanks for participating in today's OPE activity. Remember to execute the submitter script './submitter' to submit. You will also obtain the token that will then be used to unlock the graded post-quiz. Don't forget to complete the graded post-quiz for full credit.</text>
    </prompt>
    


	<!-- ASSIGNMENT PROMPTS --> 
    
    <prompt strategy="task" id="PROMPT_STEP_MATCH" intention="ROLE_ASSIGNMENT_TEMPLATE_1_INTRO">
        <text>[NAME1], you will be the Driver for this task since no one else joined in time. While you are by yourself, try to follow the responsibilities associated with all the roles -- i.e. try to first brainstorm for ideas, then analyze their pros and cons to choose one, and then implement it.|||If someone joins late, have them assume one of the missing roles and assist until you pass a test case.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_MATCH_1" intention="ROLE_ASSIGNMENT_TEMPLATE_1_INTRO">
        <text>[NAME1], you will be the Driver for this task since no one else joined in time. While you are by yourself, try to follow the responsibilities associated with all the roles -- i.e. try to first brainstorm for ideas, then analyze their pros and cons to choose one, and then implement it.|||If someone joins late, have them assume one of the missing roles and assist until you pass a test case.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_MATCH_2" intention="ROLE_ASSIGNMENT_TEMPLATE_2_INTRO">
        <text>Your initial roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]|||Recall that the navigator brainstorms ideas and decides on one which the driver then implements.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_MATCH_3" intention="ROLE_ASSIGNMENT_TEMPLATE_3_INTRO">
        <text>Your initial roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
[ROLE3] - [NAME3]|||Since we are missing a member, the project manager will monitor the group's progress towards the milestones and refer to resources like the primer as necessary. If someone joins later, have them assume the missing roles and assist until you pass a test case.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_MATCH_4" intention="ROLE_ASSIGNMENT_TEMPLATE_4_INTRO">
        <text>Your initial roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
[ROLE3] - [NAME3]
[ROLE4] - [NAME4]|||Recall that the researcher refers to resources like the primer as necessary and the project manager monitors the group's progress towards the milestones.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_MATCH_MAX_ALL" intention="ROLE_ASSIGNMENT_TEMPLATE_MAX_ALL_INTRO">
        <text>Your initial roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
[ROLE3] - [NAME3]
[ROLE4] - [NAME4]|||Whoever doesn't have an assignment is a researcher for this round.|||Recall that the researcher refers to resources like the primer as necessary and the project manager monitors the group's progress towards the milestones.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_FANCY" intention="ROLE_ASSIGNMENT_TEMPLATE_1">
        <text>[NAME1], you will be the Driver for this task since no one else joined in time. While you are by yourself, try to follow the responsibilities associated with all the roles -- i.e. try to first brainstorm for ideas, then analyze their pros and cons to choose one, and then implement it.|||If someone joins late, have them assume one of the missing roles and assist until you pass a test case.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_FANCY_1" intention="ROLE_ASSIGNMENT_TEMPLATE_1">
        <text>[NAME1], you will be the Driver for this task since no one else joined in time. While you are by yourself, try to follow the responsibilities associated with all the roles -- i.e. try to first brainstorm for ideas, then analyze their pros and cons to choose one, and then implement it.|||If someone joins late, have them assume one of the missing roles and assist until you pass a test case.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_FANCY_2" intention="ROLE_ASSIGNMENT_TEMPLATE_2">
        <text>The new roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]|||Recall that the navigator brainstorms ideas and decides on one which the driver then implements. If someone joins later, have them assume one of the missing roles and assist until you pass a test case.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_FANCY_3" intention="ROLE_ASSIGNMENT_TEMPLATE_3">
        <text>The new roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
[ROLE3] - [NAME3]|||Since we are missing a member, the project manager will monitor the group's progress towards the milestones and refer to resources like the primer as necessary. If someone joins later, have them assume one of the missing roles and assist until you pass a test case.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_FANCY_4" intention="ROLE_ASSIGNMENT_TEMPLATE_4">
        <text>The new roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
[ROLE3] - [NAME3]
[ROLE4] - [NAME4]|||Recall that the researcher refers to resources like the primer as necessary and the project manager monitors the group's progress towards the milestones.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_FANCY_MAX_ALL" intention="ROLE_ASSIGNMENT_TEMPLATE_MAX_ALL">
        <text>The new roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
[ROLE3] - [NAME3]
[ROLE4] - [NAME4]
Whoever doesn't have an assignment is a researcher for this round.|||Recall that the researcher refers to resources like the primer as necessary and the project manager monitors the group's progress towards the milestones.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_PLAIN" intention="ROLE_ASSIGNMENT_TEMPLATE_1">
        <text>[NAME1], you will be the Driver for this task since no one else joined in time. While you are by yourself, try to follow the responsibilities associated with all the roles -- i.e. try to first brainstorm for ideas, then analyze their pros and cons to choose one, and then implement it.|||If someone joins late, have them assume one of the missing roles and assist until you pass a test case.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_PLAIN_1" intention="ROLE_ASSIGNMENT_TEMPLATE_1">
        <text>[NAME1], you will be the Driver for this task since no one else joined in time. While you are by yourself, try to follow the responsibilities associated with all the roles -- i.e. try to first brainstorm for ideas, then analyze their pros and cons to choose one, and then implement it.|||If someone joins late, have them assume one of the missing roles and assist until you pass a test case.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_PLAIN_2" intention="ROLE_ASSIGNMENT_TEMPLATE_2">
        <text>The new roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
If someone joins later, have them assume one of the missing roles and assist until you pass a test case.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_PLAIN_3" intention="ROLE_ASSIGNMENT_TEMPLATE_3">
        <text>The new roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
[ROLE3] - [NAME3]
If someone joins later, have them assume one of the missing roles and assist until you pass a test case.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_PLAIN_4" intention="ROLE_ASSIGNMENT_TEMPLATE_4">
        <text>The new roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
[ROLE3] - [NAME3]
[ROLE4] - [NAME4]</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_PLAIN_MAX_ALL" intention="ROLE_ASSIGNMENT_TEMPLATE_MAX_ALL">
        <text>The new roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
[ROLE3] - [NAME3]
[ROLE4] - [NAME4]
Whoever doesn't have an assignment is a researcher for this round.</text>
    </prompt>    
    
</prompts>