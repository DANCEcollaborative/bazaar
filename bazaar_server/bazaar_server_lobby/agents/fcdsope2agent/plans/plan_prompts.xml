<?xml version="1.0" encoding="UTF-8"?>
<prompts>
    
    <prompt strategy="task" id="PROMPT_INITIAL_INTRODUCTION">
        <text>Before starting please make sure you have attempted the pre-quiz. You'll get credit just for submitting it. Have ONLY ONE PERSON run this init script to set up the environment - "wget https://clouddatascience.blob.core.windows.net/ope-evaluation-optimization/sail/v1/env_setup_oneshot.sh \\and\\and yes | sh env_setup_oneshot.sh"|||Once that's done, EVERYONE should run "source ~/.bashrc"|||At the end of the session, execute the submitter script ONE PERSON AT A TIME using './submitter'. Even if the submission fails, you will get the post-quiz token for accessing the post-quiz.|||We will rotate roles every time a new test case passes.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_MATCH_1">
        <text>Even though you are doing the activity by yourself, try to follow the responsibilities associated with the roles, i.e. try to first brainstorm for ideas, then analyze their pros and cons to choose one, and then implement it. If someone joins later, have them assume one of the missing roles and assist until you pass a test case.</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_MATCH_2">
        <text>The new roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
Recall that the navigator brainstorms ideas and decides on one which the driver then implements. Have ONLY ONE PERSON run this init script to set up the environment - "wget https://clouddatascience.blob.core.windows.net/ope-evaluation-optimization/sail/v1/env_setup_oneshot.sh \\and\\and yes | sh env_setup_oneshot.sh". If someone joins later, have them assume one of the missing roles and assist until you pass a test case.
		</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_MATCH_3">
        <text>The new roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
[ROLE3] - [NAME3]
Since we are missing a member, the project manager will monitor the group's progress towards the milestones and refer to resources like the primer as necessary. Have ONLY ONE PERSON run this init script to set up the environment - "wget https://clouddatascience.blob.core.windows.net/ope-evaluation-optimization/sail/v1/env_setup_oneshot.sh \\and\\and yes | sh env_setup_oneshot.sh". If someone joins later, have them assume one of the missing roles and assist until you pass a test case.
		</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_MATCH_4">
        <text>The new roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
[ROLE3] - [NAME3]
[ROLE4] - [NAME4]
Recall that the researcher refers to resources like the primer as necessary and the project manager monitors the group's progress towards the milestones. Have ONLY ONE PERSON run this init script to set up the environment - "wget https://clouddatascience.blob.core.windows.net/ope-evaluation-optimization/sail/v1/env_setup_oneshot.sh \\and\\and yes | sh env_setup_oneshot.sh"
</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_1">
        <text>The new roles are -
[ROLE1] - [NAME1]</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_2">
        <text>The new roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_3">
        <text>The new roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
[ROLE3] - [NAME3]</text>
    </prompt>
    
    <prompt strategy="task" id="PROMPT_STEP_ROTATE_4">
        <text>The new roles are -
[ROLE1] - [NAME1]
[ROLE2] - [NAME2]
[ROLE3] - [NAME3]
[ROLE4] - [NAME4]</text>
    </prompt>
     
     <prompt strategy="task" id="PROMPT_STEP_LO1_SOLUTION">
     <text>"A concise way to solve this problem - 

    preprocessor = StandardScaler()
    train_X, test_X, train_y, test_y = train_test_split(X, y, random_state = seed)
    model = LogisticRegression(random_state = seed)
    train_X = preprocessor.fit_transform(train_X)
    test_X = preprocessor.transform(test_X)
    model.fit(train_X, train_y)
    return model.score(test_X, test_y)"</text>
     </prompt>
     
     <prompt strategy="task" id="PROMPT_STEP_LO1_REFLECTION">
     <text>Let's take some time to discuss this solution. Take turns to discuss the question posed by the bot. We will move on in a few minutes.|||Project Manager, please lead the discussion - You already know why it's extremely bad practice to use part of the train set as test set. Now, discuss why usage of preprocessor should follow same logic.</text>
     </prompt>
     
     <prompt strategy="task" id="PROMPT_STEP_LO1_REFLECTION_FOLLOW">
     <text>As a follow-up, discuss why you should not fit StandardScaler on test data.</text>
     </prompt>
     
     <prompt strategy="task" id="PROMPT_STEP_END">
     <text>Thank you for your participation. This is end of our OPE session.</text>
     </prompt>

</prompts>