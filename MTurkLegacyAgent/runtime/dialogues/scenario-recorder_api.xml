<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE scenario SYSTEM "TuTalkScenario.dtd">
<scenario default-language="en" scenario-name="recorder_api">
	<configuration>
		
		<!-- It *is* possible to hook up a LightSide classifier to TuTalk, 
		such that the predicted labels are treated as concepts. 
		but not today. -->
			
		<!-- 	
		<module kind="model" name="animals"
			classname="edu.cmu.cs.lti.tutalk.module.SidePredictor">
			<param key="path" value="models/animals.ser" />
		</module> 
		-->

	</configuration>

	<!-- I'm not entirely sure what these are used for. -->
	<transitions>
		<transition ack-type="agree" floor-status="neutral">
			<tphrase> yes </tphrase>
			<tphrase> okay </tphrase>
		</transition>
	
		<transition ack-type="none">
			<tphrase> moving on... </tphrase>
		</transition>
	</transitions>
	
	<!-- 'Concepts' define things that students might say,
	     AND things that the tutor might say back. 
	     Tutor concepts should take the form of phrase lists.
		 Student concepts can be phrase lists, 
		 regular expressions, or lists of annotations,
	     but only one of these at a time. -->
		
	<concepts>
		<!-- this is a special kind of concept for catching unexpected student responses -->
		<concept label="unanticipated-response">
			<phrase>anything else</phrase>
		</concept>
		
		
		<!-- tutor concepts. -->
		<concept label="introduction">
			<phrase>I can help you decide on the type of recorder api to use and give you an example code snippet.</phrase>
		</concept>
		
		<concept label="api_question">
			<phrase>Have you decided on a recorder api to use?</phrase>
		</concept>
		
		<!-- the tutor will choose randomly between multiple phrases for a concept. -->
		<concept label="facts">
			<phrase>You can record audio using the MediaRecorder or AudioRecord APIs if supported by the device hardware</phrase>
		</concept>
		
		<concept label="unrecognized">
			<phrase>I don't know what that is.</phrase>
			<phrase>That doesn't make sense to me.</phrase>
		</concept>
		
		<concept label="correct">
			<phrase>Well done!</phrase>
			<phrase>Okeydoke.</phrase>
			<phrase>Sounds good...</phrase>
		</concept>
		
		<concept label="ok">
			<phrase>Ok</phrase>
		</concept>
		
		<concept label="ar">
			<phrase>Use following code snippet to use AudioRecord 
			
			import android.media.AudioRecord; 
			AudioRecord Recorder_obj = null;</phrase>
		</concept>
		
		<concept label="mr">
			<phrase>Use following code snippet to use MediaRecorder. But note that wav audio format is not supported by MediaRecorder.
			
			import android.media.MediaRecorder; 
			MediaRecorder Recorder_obj = null;</phrase>
		</concept>
		
		<concept label="explain_diff">
			<phrase>If you use MediaRecorder, it will record compressed audio into a file.
			
If you use AudioRecord, you must read and compress the audio from the internal buffer separately.

MediaRecorder can record only the following file types: AAC_ADTS, AMR_NB, AMR_WB, MPEG_4, RAW_AMR, THREE_GPP, WEBM</phrase>
		</concept>
		
		<concept label="explain_support">
			<phrase>MediaRecorder has been supported since API Level 1, while AudioRecord is supported in API Level 3 and up.</phrase>
		</concept>
		
		<concept label="explain_easiest">
			<phrase>If you're not doing any complex processing, MediaRecorder is easier to use than AudioRecord.</phrase>
		</concept>
		
		<concept label="dont_be_clever">
			<phrase>Aren't you clever?</phrase>
		</concept>
		<!-- ent tutor concepts. -->
		
		
		<!-- student concepts. -->
		
		<!-- these match against external (MessageAnnotator) annotations. -->
		<concept label="yes" type="annotation">
			<phrase>AFFIRMATIVE</phrase>
		</concept>
		
		<concept label="no" type="annotation">
			<phrase>NEGATIVE</phrase>
		</concept>
		
		<!-- these match against regular expressions. -->
		
		<concept label="choices" type="regex">
			<phrase>(options|choices)</phrase>
		</concept>
		
		<concept label="ask_diff" type="regex">
			<phrase>difference</phrase>
			<phrase>should i use</phrase>
			<phrase>suggest</phrase>
			<phrase>recommend</phrase>
		</concept>
		
		<concept label="ask_support" type="regex">
			<phrase>support</phrase>
			<phrase>device</phrase>
			<phrase>hardware</phrase>
			<phrase>supported</phrase>
		</concept>
		
		<concept label="ask_easiest" type="regex">
			<phrase>easy</phrase>
			<phrase>easie(r|st)</phrase>
			<phrase>simple(r|st)?</phrase>
			<phrase>less complicated</phrase>
			<phrase>less work</phrase>
			<phrase>better</phrase>
			<phrase>best</phrase>
		</concept>
		
		<concept label="audiorecord" type="regex">
			<phrase>audiorecord</phrase>
		</concept>
		
		
		<concept label="mediarecorder" type="regex">
			<phrase>mediarecorder</phrase>
		</concept>
		
		<!-- end student concepts. -->
		
	</concepts>
	
	
	<script>
		<goal name="start" difficulty="1">
			
			<step>
				<!-- deliver a statement from the concept named "introduction"  -->
				<initiation>introduction</initiation>
			</step>
			
			<step>
				<!-- Every step begins with an initiating concept or literal phrase -->
				<initiation>api_question</initiation>
				
				<!-- These are the "response" options. 
					If the concept between the tags matches the student statement, 
				    the "say" concept/phrase will be delivered by the tutor.
				    "push" adds another goal to the dialogue's stack. 
					 Note that goals should NOT be recursively nested. -->
					
				<response push="elicitate" say="ok">yes</response>
				<response push="remediate" say="ok">no</response>
				<response push="remediate" say="ok">choices</response>
				<response push="elicitate" say="explain_easiest">ask_easiest</response>
                
				<!-- unanticipated-response is special: it's anything that doesn't match one of the above. -->
				<response push="remediate" say="ok">unanticipated-response</response>
			</step>
			
			
			<step>
				<initiation>Ok, move on and decide other steps.</initiation>
			</step>
		</goal>
		
		<!-- Goals are referenced by their names. "difficulty" is meaningless for now. -->
		<goal name="remediate" difficulty="0">
			<step>
				<initiation>Maybe this will help:</initiation>
			</step>
			<step>
				<!-- deliver a statement from the concept named "facts"  -->
				<initiation>facts</initiation>
			</step>
			<step>
				<initiation>Which one would you like to choose?</initiation>
                <response push="elicitate" say="mr">mediarecorder</response>
				<response say="ar">audiorecord</response>
				<response push="elicitate" say="explain_diff">ask_diff</response>
				
				<response push="elicitate" say="explain_support">ask_support</response>
				<response push="elicitate" say="explain_easiest">ask_easiest</response>
				<response push="elicitate" say="unrecognized">unanticipated-response</response>
			
			</step>
		</goal>
		
	   <goal name="elicitate" difficulty="0">

			<step>
				<initiation>Which api will you use?</initiation>
                <response say="mr">mediarecorder</response>
				<response say="ar">audiorecord</response>
				<response say="unrecognized">unanticipated-response</response>
			</step>
		</goal>
		
	</script>

</scenario>
