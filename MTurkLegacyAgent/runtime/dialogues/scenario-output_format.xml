<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE scenario SYSTEM "TuTalkScenario.dtd">
<scenario default-language="en" scenario-name="recorder_api">
	<configuration>
		
		<!-- It *is* possible to hook up a LightSide classifier to TuTalk, 
		such that the predicted labels are treated as concepts. 
		but not today. -->
			
		<!-- 	
		<module kind="model" name="animals"
			classname="edu.cmu.cs.lti.tutalk.module.SidePredictor">
			<param key="path" value="models/animals.ser" />
		</module> 
		-->

	</configuration>

	<!-- I'm not entirely sure what these are used for. -->
	<transitions>
		<transition ack-type="agree" floor-status="neutral">
			<tphrase> yes </tphrase>
			<tphrase> okay </tphrase>
		</transition>
	
		<transition ack-type="none">
			<tphrase> moving on... </tphrase>
		</transition>
	</transitions>
	
	<!-- 'Concepts' define things that students might say,
	     AND things that the tutor might say back. 
	     Tutor concepts should take the form of phrase lists.
		 Student concepts can be phrase lists, 
		 regular expressions, or lists of annotations,
	     but only one of these at a time. -->
		
	<concepts>
		<!-- this is a special kind of concept for catching unexpected student responses -->
		<concept label="unanticipated-response">
			<phrase>anything else</phrase>
		</concept>
		
		
		<!-- tutor concepts. -->
		<concept label="introduction">
			<phrase>I can help you to decide the output file format to be used and example code snippet to do it.</phrase>
		</concept>
		
		<concept label="output_format">
			<phrase>Have you decided or a format, or do you know of any you can use?</phrase>
		</concept>
		
		<!-- the tutor will choose randomly between multiple phrases for a concept. -->
		<concept label="facts">
			<phrase>Possible audio formats include:
aac_adts
default format
mpeg_4
raw_amr
three_gpp
webm
wav
amr_nb
amr_wb
			
			</phrase>
		</concept>
		
		<concept label="aac_adts" type="regex">
			<phrase>aac_adts|aac adts</phrase>
		</concept>
		
		<concept label="mpeg_4" type="regex">
			<phrase>mpeg|mpeg_4|mpeg4|media</phrase>
		</concept>
		
		<concept label="default" type="regex">
			<phrase>default</phrase>
		</concept>
	
			<concept label="amr_nb" type="regex">
			<phrase>amr_nb|amr nb</phrase>
		</concept>
		
				<concept label="amr_wb" type="regex">
			<phrase>amr_wb|amr wb</phrase>
		</concept>
		
				<concept label="raw_amr" type="regex">
			<phrase>raw_amr</phrase>
		</concept>
		
				<concept label="three_gpp" type="regex">
			<phrase>three_gpp|3gpp</phrase>
		</concept>


				<concept label="webm" type="regex">
			<phrase>webm|vp8|vorbis</phrase>
		</concept>

				<concept label="wav" type="regex">
			<phrase>wav</phrase>
		</concept>

		<concept label="unrecognized">
			<phrase>I don't know what that is.</phrase>
			<phrase>That doesn't make sense to me.</phrase>
		</concept>
		
		<concept label="correct">
			<phrase>Well done!</phrase>
			<phrase>Okeydoke.</phrase>
			<phrase>Sounds good...</phrase>
		</concept>
		
		<concept label="ok">
			<phrase>Ok</phrase>
		</concept>
		
		<concept label="aac_adts_p" >
			<phrase>You can use AAC ADTS file format using following code snippet
			
			mRecorder.setOutputFormat(MediaRecorder.OutputFormat.AAC_ADTS);
			
			</phrase>
		</concept>
		<concept label="amr_nb_p" >
			<phrase>You can use AMR NB file format using following code snippet
			
			mRecorder.setOutputFormat(MediaRecorder.OutputFormat.AMR_NB);
			
			</phrase>
		</concept>		
		<concept label="amr_wb_p" >
			<phrase>You can use AMR WB file format using following code snippet
			
			mRecorder.setOutputFormat(MediaRecorder.OutputFormat.AMR_WB);
			
			</phrase>	
		</concept>	
		<concept label="default_p" >
			<phrase>You can use default file format using following code snippet
			
			mRecorder.setOutputFormat(MediaRecorder.OutputFormat.AAC_ADTS);
			
			</phrase>
		</concept>		
		<concept label="mpeg_4_p" >
			<phrase>You can use MPEG4 media file format using following code snippet
			
			mRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
			
			</phrase>
		</concept>		
		<concept label="raw_amr" >
			<phrase>This format was deprecated in API level 16. Deprecated in favor of MediaRecorder.OutputFormat.AMR_NB.
			You can still use AAC Low Complexity (AAC-LC) audio codec using following code snippet
			
			mRecorder.setOutputFormat(MediaRecorder.OutputFormat.RAW_AMR);
			
			</phrase>
		</concept>		
		<concept label="three_gpp_p" >
			<phrase>You can use 3GPP media file format using following code snippet
			
			mRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
			
			</phrase>
		</concept>		
		<concept label="webm_p" >
			<phrase>You can use VP8/VORBIS data in a WEBM container using following code snippet
			
			mRecorder.setOutputFormat(MediaRecorder.OutputFormat.WEBM);
			
			</phrase>
		</concept>
	    <concept label="wav_p" >
			<phrase>You can use wav file format using following code snippet. But note that wav audio format is not supported by MediaRecorder API.
			
			mRecorder.setOutputFormat(MediaRecorder.OutputFormat.WAV);
			
			</phrase>
		</concept>
		
		<concept label="congrats">
			<phrase>You're ready to be a zoologist!</phrase>
		</concept>
		
		<concept label="dont_be_clever">
			<phrase>Aren't you clever?</phrase>
		</concept>
		
		<!-- ent tutor concepts. -->
		
		
		<!-- student concepts. -->
		
		<!-- these match against external (MessageAnnotator) annotations. -->
		<concept label="yes" type="annotation">
			<phrase>AFFIRMATIVE</phrase>
		</concept>
		
		<concept label="no" type="annotation">
			<phrase>NEGATIVE</phrase>
		</concept>
		
		<!-- these match against regular expressions. -->
		
		<concept label="audiorecord" type="regex">
			<phrase>audiorecord</phrase>
		</concept>
		
		
		<concept label="mediarecorder" type="regex">
			<phrase>mediarecorder</phrase>
		</concept>
		
		<concept label="mammal" type="regex">
			<phrase>mammal|cow|dog|cat|human|gerbil|whale|elephant</phrase>
			<phrase>fur|hair|milk|warm</phrase>
		</concept>
		
		<!-- end student concepts. -->
		
	</concepts>
	
	
	<script>
		<goal name="start" difficulty="1">
			
			<step>
				<!-- deliver a statement from the concept named "introduction"  -->
				<initiation>introduction</initiation>
			</step>
			
			<step>
				<!-- Every step begins with an initating concept or literal phrase -->
				<initiation>output_format</initiation>
				
				<!-- These are the "response" options. 
					If the concept between the tags matches the student statement, 
				    the "say" concept/phrase will be delivered by the tutor.
				    "push" adds another goal to the dialogue's stack. 
					 Note that goals should NOT be recursively nested. -->
					
				<response push="elicitate" say="ok">yes</response>
				<response push="remediate" say="ok">no</response>
                
				<!-- unanticipated-response is special: it's anything that doesn't match one of the above. -->
				<response push="remediate" say="ok">unanticipated-response</response>
			</step>
			
			
			<step>
				<initiation>Ok, move on.</initiation>
			</step>
		</goal>
		
		<!-- Goals are referenced by their names. "difficulty" is meaningless for now. -->
		<goal name="remediate" difficulty="0">
			<step>
				<initiation>Maybe this will help:</initiation>
			</step>
			<step>
				<!-- deliver a statement from the concept named "facts"  -->
				<initiation>facts</initiation>
			</step>
			
 





			<step>
				<initiation>Which one you will like to choose?</initiation>
                <response say="raw_amr_p">raw_amr</response>
				<response say="wav_p">wav</response>
				<response say="webm_p">webm</response>
				<response say="aac_adts_p">aac_adts</response>
				<response say="mpeg_4_p">mpeg_4</response>
				<response say="default_p">default</response>
			    <response say="three_gpp_p">three_gpp</response>
				<response say="amr_nb_p">amr_nb</response>
				<response say="amr_wb_p">amr_wb</response>
				<response say="unrecognized">unanticipated-response</response>
			</step>
		</goal>
		
	   <goal name="elicitate" difficulty="0">

			<step>
				<initiation>Which format you will use?</initiation>
                <response say="raw_amr_p">raw_amr</response>
				<response say="wav_p">wav</response>
				<response say="webm_p">webm</response>
			    <response say="aac_adts_p">aac_adts</response>
				<response say="mpeg_4_p">mpeg_4</response>
				<response say="default_p">default</response>
			    <response say="three_gpp_p">three_gpp</response>
				<response say="amr_nb_p">amr_nb</response>
				<response say="amr_wb_p">amr_wb</response>
				<response say="unrecognized">unanticipated-response</response>
			</step>
		</goal>
		
	</script>

</scenario>
